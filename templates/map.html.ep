% use SvgHex;
% use Tiles;
%
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="1600" height="1600">
    <!--<defs>
    <path id="svg_hex" class="tile" d="M 500 350 l 50 0 25 43 -25 43 -50 0 -25 -43 z" fill="black" fill-opacity="0.0" stroke-width="2" stroke="black"/>
    </defs>-->
% my $offset = 240;
<g transform="translate(240, 83)">\
% for my $i (0 .. $#$hand) {
<%= include 'tiles/'.Tiles::template($hand->[$i]), x => ($i*130), y => -43, tile => $hand->[$i] %>
<%= include 'tiles/outline', x => ($i*130), y => -43, type => 'hand', id => "hand$i" %>
<!--<path id="hand<%= $i %>" class="hand tile" d="M <%= ($i*130)." -43" %> l 50 0 25 43 -25 43 -50 0 -25 -43 z" fill="black" fill-opacity="0.0" stroke-width="2" stroke="black"/>-->
% }
</g>\
<g transform="translate(525,463)">
% for my $ring (0..3) {
%     for my $n (0..(hex_num_tiles($ring)-1)) {
%	  my ($dx, $dy) = hex_coords( $ring, $n );
%	  my $map_tile = ( grep { $_->[0] == $ring && $_->[1] == $n } @$map )[0];
%	  next if $map_tile && !defined $map_tile->[2];
%	  if ($map_tile) {
<%= include 'tiles/'.Tiles::template($map_tile->[2]), ( x => $dx, y => $dy, tile => $map_tile->[2] ) %>\
<%= include 'tiles/outline', x => $dx, y => $dy, type => undef %>\
%	  } else {
<%= include 'tiles/outline', x => $dx, y => $dy, type => 'map', id => "$ring,$n" %>\
%	  }
%     }
% }
</g>
</svg>
<div id="confirm">
<div>
    <p>Are you sure you want to place this tile?</p>
    <button id="c-yes">Yes</button>
    <button id="c-no">No</button>
</div>
</div>
