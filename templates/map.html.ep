% use Tiles;
% use TileSvg qw(xy_coords);
% use TileMap qw(tiles_in_ring);
% use SVG qw(render_active_players outline);
%
% my $hand = $session->player($p_id)->[2];
% my $map = $session->map_data;
%
<div style="position: absolute; right: 0; min-height: 100vh; min-width: 20em; border-left: 3px double black">
<h3 style="margin: 1em 2em">\
<%= $session->player($p_id)->[1] %>\
</h3>
<div id="players">
<%= render_active_players( $session ); %>
</div>
</div>
<div style="min-height: 100vh; width:40em">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewbox="-58 -50 560 100">
begin
<%= include 'svg_defs' %>\
end
<%= include 'hand', hand => $hand %>
</svg>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewbox="-280 -310 560 620">
% for my $ring (0..3) {
%     for my $n (0..(tiles_in_ring($ring)-1)) {
%	  my ($dx, $dy) = xy_coords( $ring, $n );
%	  my $map_tile = ( grep { $_->[0] == $ring && $_->[1] == $n } @$map )[0];
%	  next if $map_tile && !defined $map_tile->[2];
%	  if ($map_tile) {
<g transform="translate(<%= "$dx,$dy" %>)">
<%= include 'tiles/'.$map_tile->[2]{template}, tile => $map_tile->[2] %>\
<%= outline() %>
</g>
%	  } else {
%#	      'a' is for "allowed_types"
%	      my @a = TileMap::allowed_types($map, $ring, $n);
<g transform="translate(<%= "$dx,$dy" %>)">
<% if (@a) { =%>
<%= outline( { 
    'ic-trigger-on' => '',
    'ic-post-to'    => '/',
    'ic-target'	    => '#map',
    class	    => (join ' ', @a, 'map'),
    id		    => "$ring,$n"
}) %>
<% } else { %>
<%= outline() %>
<% } %>
</g>
%	  }
%     }
% }
</svg>
</div>
